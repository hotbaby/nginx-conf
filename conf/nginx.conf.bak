
user  yy;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    client_max_body_size 1024m;

    server {
        listen       8080;
        server_name  192.168.1.8;

        #charset koi8-r;

        error_log  logs/error.log  info;

        location / {
            root html;
            index index.html;
        }

        location /rpc {
            gearman_server 192.168.1.8:8080;
            gearman_pass;
        }

        location /upload {
            upload_pass_args on;
            
            # Pass altered request body to this location
            upload_pass   @uploadhandler;

            # Store files to this directory
            # The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 should exist
            upload_store /tmp/upload;

            # Allow uploaded files to be read only by user
            #upload_store_access user:r;

            # Set specified fields in request body
            upload_set_form_field "${upload_field_name}_name" $upload_file_name;
            upload_set_form_field "${upload_field_name}_content_type" $upload_content_type;
            upload_set_form_field "${upload_field_name}_tmp_path" $upload_tmp_path;

            # Inform backend about hash and size of a file
            upload_aggregate_form_field "${upload_field_name}_md5" $upload_file_md5;
            upload_aggregate_form_field "${upload_field_name}_size" $upload_file_size;

            #upload_pass_form_field "^submit$|^description$";
            upload_pass_form_field "^path";
            upload_cleanup 400 404 499 500-505;
        }

        location @uploadhandler {
             default_type 'text/plain';
             content_by_lua "

                 ngx.say('200 OK!')
                 ngx.say('method: ', ngx.req.get_method())
                 
                 ngx.req.read_body()
                 local args, err = ngx.req.get_post_args(30)
                 if not args then
                     ngx.say('failed to get post args: ', err)
                     return
                 end
                 
                 for key, val in pairs(args) do
                     if type(val) == 'table' then
                        ngx.say('@@@key:', key)
                        ngx.say('@@@value:', table.concat(val, ', '))
                     else
                        ngx.say(key)
                        ngx.say(val)
                        ngx.log(ngx.INFO, val)
                     end
                 end
                 ngx.say('body file:', ngx.req.get_body_file())
                 
                 local h = ngx.req.get_headers()
                 if not h then
                     ngx.say('failed to get headers.')
                     return
                 end
                 
                 for key, val in pairs(h) do
                     ngx.say(key, ':', val)
                 end
                 
                 ";
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
